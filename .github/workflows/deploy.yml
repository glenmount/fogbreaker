name: Deploy (Netlify + CloudFront invalidate on evidence change)

on:
  push:
    branches: [ main ]
    paths:
      - "index.html"
      - "compare.html"
      - "web/**"
      - "data/**"
      - "rankings/**"
      - ".github/workflows/deploy.yml"
  workflow_dispatch: {}

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    env:
      PDF_ORIGIN: ${{ vars.PDF_ORIGIN }}
      NETLIFY_SITE_ID: ${{ vars.NETLIFY_SITE_ID }}
      NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
      CLOUDFRONT_DIST_ID: ${{ vars.CLOUDFRONT_DIST_ID }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Netlify CLI
        run: npm -g i netlify-cli@17

      - name: Stage static site
        run: |
          rm -rf dist && mkdir -p dist/data dist/rankings
          cp -a web/* dist/ || true
          [ -f index.html ] && cp index.html dist/
          [ -f compare.html ] && cp compare.html dist/
          [ -f data/verified.json ] && cp -a data/verified.json dist/data/
          [ -f rankings/top10.json ] && cp -a rankings/top10.json dist/rankings/

      - name: Rewrite evidence.json → absolute CDN URLs
        run: |
          if [ -f data/evidence.json ]; then
            python - <<'PY'
            import json, os, pathlib
            origin=os.environ["PDF_ORIGIN"]
            src=pathlib.Path("data/evidence.json")
            dst=pathlib.Path("dist/data/evidence.json")
            dst.parent.mkdir(parents=True, exist_ok=True)
            ev=json.load(open(src))
            def to_abs(u):
              return u if u.startswith(("http://","https://")) else origin.rstrip("/")+"/"+u.lstrip("/")
            for pid,m in ev.items():
              if isinstance(m,dict):
                for k,v in list(m.items()):
                  if isinstance(v,str): m[k]=to_abs(v)
            json.dump(ev, open(dst,"w"), indent=2)
            print(f"evidence → {origin}")
            PY
          else
            echo "No data/evidence.json found; skipping rewrite."
          fi

      - name: Netlify deploy (prod)
        run: |
          netlify deploy --dir=dist --prod --site "$NETLIFY_SITE_ID" --auth "$NETLIFY_AUTH_TOKEN"

      - name: Did evidence.json change?
        id: diff
        shell: bash
        run: |
          if git diff --quiet HEAD^ -- data/evidence.json 2>/dev/null; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Compute invalidation paths
        if: steps.diff.outputs.changed == 'true'
        id: invpaths
        shell: bash
        run: |
          set -e
          mkdir -p /tmp/inv
          git show HEAD^:data/evidence.json > /tmp/inv/old.json 2>/dev/null || true
          cp dist/data/evidence.json /tmp/inv/new.json
          python - <<'PY'
          import json
          from urllib.parse import urlparse
          def to_path(u):
            if not isinstance(u,str): return None
            if u.startswith("http"): return urlparse(u).path
            return u if u.startswith("/") else "/"+u
          def grab(fp):
            try: d=json.load(open(fp))
            except Exception: return set()
            out=set()
            for m in d.values():
              if isinstance(m,dict):
                for v in m.values():
                  p=to_path(v)
                  if p and p.endswith(".pdf"): out.add(p)
            return out
          new=grab("/tmp/inv/new.json"); old=grab("/tmp/inv/old.json")
          paths=sorted(new | (new-old))
          if not paths or len(paths)>50: paths=["/corpus/*"]
          print("\n".join(paths))
          PY
          > /tmp/inv/paths.txt
          cat /tmp/inv/paths.txt

      - name: Configure AWS
        if: steps.diff.outputs.changed == 'true'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2

      - name: Invalidate CloudFront
        if: steps.diff.outputs.changed == 'true'
        run: |
          aws cloudfront create-invalidation \
            --distribution-id "$CLOUDFRONT_DIST_ID" \
            --paths $(tr '\n' ' ' < /tmp/inv/paths.txt)
          echo "Invalidation requested."
